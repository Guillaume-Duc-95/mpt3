<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>Opt</function>
	
	<info>
		Interface for solving optimization problems
	</info>

    <syntax>problem = Opt('H',H,'f',f,'pF',F,'A',A,'b',b,'Ae',Ae,...)</syntax>
    <syntax>problem = Opt('M',M,'q',q,'Q',Q,'Ath',Ath,'bth',bth)</syntax>    
    <syntax>problem = Opt(Matrices)</syntax>
    <syntax>problem = Opt(constraints, objective, theta, x)</syntax>    

    <descr>
        Encapsulates data and solutions for LP/QP/MPLP/MPQP/LCP/PLCP problems. The data can be provided
        directly, or using YALMIP format or MPT2 format.

        The following general MPQP format that is considered by <tt>Opt</tt> class:
        <latex>
			\begin{eqnarray}
  				\min &amp;&amp;  {\frac{1}{2}} {x}^{T}Hx+{(F\theta+f)}^{T}x + {\theta}^{T}Y{\theta} + C\theta + c \label{eq:Opt:QP0-obj} \\
				\text{s.t.} &amp;&amp; Ax \le  b + B\theta  \label{eq:Opt:QP0-ineq}\\
				&amp;&amp; {A}_{e}x = {b}_{e} + E\theta \label{eq:Opt:QP0-eq} \\
                &amp;&amp; {A}_{\theta}\theta = {b}_{\theta} \label{eq:Opt:QP0-theta}
            \end{eqnarray} 
        </latex>
        which contains <i>n</i> optimization variables <i>x</i>, <i>d</i> number of parameters <i>y</i>,
        <i>m</i>inequality constrains, <i>m_{e}</i> equality constraints and constraints on the
        parameter <i>\theta</i>. <tt>Opt</tt> class accepts also PLCP formulation of the form        
        <latex>
            \begin{eqnarray}
            w - Mz = q + Q\theta \\ 
            w \ge 0 \\
            z  \ge 0 \\
            {w}^{T}z = 0        
            \end{eqnarray}                        
        </latex>
        where <i>w</i> and <i>z</i> are the optimization variables and <i>\theta</i> is the parameter. 
        
        The output format of the optimization problem depends on the input data. For instance, 
        non-parametric LCP can be created by providing <i>M</i>, <i>q</i> data and the parametric LPC
        by supplying <i>M</i>, <i>q</i>, and <i>Q</i>. 
        
        At the time of construction, the problem data are validated and checked for proper dimensions.
        For all the methods involved in <tt>Opt</tt> class see <tt>methods('Opt')</tt>.
        
        
      
                
	</descr>
    
    <input>
        <name>H</name>
        <descr>Quadratic part of the objective function.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input required="true">
        <name>f</name>
        <descr>Linear part of the objective function.</descr>
        <class name="double"/>
    </input>
    <input>
        <name>pF</name>
        <descr>Linear part of the objective function for parameters.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>            
    <input>
        <name>Y</name>
        <descr>Quadratic part of the objective function for parameters.</descr>
        <class name="double"/>
        <default>0</default>
    </input>            
    <input>
        <name>C</name>
        <descr>Linear part of the objective function for parameters.</descr>
        <class name="double"/>
        <default>0</default>
    </input>            
    <input>
        <name>c</name>
        <descr>Constant term in the objective function</descr>
        <class name="double"/>
        <default>0</default>
    </input>            
    <input required="true">
        <name>A</name>
        <descr>Linear part of the inequality constraints <i>Ax \le b + B\theta</i>.</descr>
        <class name="double"/>
    </input>
    <input required="true">
        <name>b</name>
        <descr>Right hand side of the inequality constraints <i>Ax \le b + B\theta</i>.</descr>
        <class name="double"/>
    </input>
    <input>
        <name>pB</name>
        <descr>Right hand side of the inequality constraints for parameters <i>Ax \le b + B\theta</i>.</descr>
        <class name="double"/>
    </input>            
    <input>
        <name>Ae</name>
        <descr>Linear part of the equality constraints <i>{A}_{e}x=b_{e} + E\theta </i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>be</name>
        <descr>Right hand side of the equality constraints <i>{A}_{e}x=b_{e} + E\theta </i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>pE</name>
        <descr>Right hand side of the equality constraints for parameters <i>{A}_{e}x=b_{e} + E\theta </i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>            
    <input>
        <name>lb</name>
        <descr>Lower bound for the decision variables <i>x \ge \text{lb}</i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>ub</name>
        <descr>Upper bound for the decision variables <i>x \le \text{ub}</i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>Ath</name>
        <descr>Linear part of the inequality constraints <i>A_{\theta}\theta \le b_{\theta}</i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>bth</name>
        <descr>Right hand side of the inequality constraints <i>A_{\theta}\theta \le b_{\theta}</i>.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>            
    <input>
        <name>vartype</name>
        <descr>A vector of strings determining the type of the variable.
            Supported characters are C (continuous), I (integer), B (binary), N (semi-integer), S (semi-continuous). 
            Example: First variable from three is binary, the rest is continuous: <tt>vartype='BCC';</tt> 
        </descr>
        <class name="char"/>
        <default>''</default>
    </input>            
    <input>
        <name>solver</name>
        <descr>S string specifying which solver should be called.</descr>
        <class name="char"/>
        <default>[]</default>
    </input>
    <input>
        <name>M</name>
        <descr>Linear matrix involved in LCP.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>q</name>
        <descr>Right hand side vector involved in LCP.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>
    <input>
        <name>Q</name>
        <descr>Linear matrix involved in parametric formulation of LCP.</descr>
        <class name="double"/>
        <default>[]</default>
    </input>            
    <input>
        <name>Matrices</name>
        <descr> Structure with the matrices defining MPLP/MPQP problem as returned by <tt>mpt_constructMatrices</tt> function. 
        For detailed description, see <tt>help mpt_constructMatrices</tt>.</descr>
        <class name="struct"/>
    </input>
    <input>
        <name>constraints</name>
        <descr> Yalmip set of constraints that formulate the given problem. </descr>
        <class name="lmi"/>
    </input>
    <input>
        <name>objective</name>
        <descr> Yalmip variable that represents objective value of the given problem. </descr>
        <class name="sdpvar"/>
    </input>
    <input>
        <name>theta</name>
        <descr> Specification of parametric variables involved in problem formulated in Yalmip.</descr>
        <class name="sdpvar"/>
    </input>
    <input>
        <name>x</name>
        <descr> Specification of decision variables involved in problem formulated in Yalmip.</descr>
        <class name="sdpvar"/>
    </input>
        
    
    <output>
        <name>problem</name>
        <descr> Object of the <tt>Opt</tt> class that defines the optimization problem. </descr>
        <class name="Opt"/>        
    </output>
    
    
    <example>
        <descr> Formulate LP problem <i>\min ~ {f}^{T}x, ~ \text{s.t.} ~ Ax\le b </i>. </descr>
        <cmd> f = [1 2 3]; A = randn(8,3); b = ones(8,1); </cmd>
        <descr> Consruct the object</descr>
        <cmd> problem = Opt('f',f,'A',A,'b',b) </cmd>
        <descr> Solve the problem </descr>
        <cmd> problem.solve </cmd>        
    </example>    
    <example>
        <descr> Formulate MPQP <i>\min ~ 0.5{x}^{T}Hx + {f}^{T}x, ~ \text{s.t.} ~ Ax\le b + B\theta </i>. </descr>
        <cmd> f = [-1 2 -3 4]; A = randn(12,4); b = ones(12,1); B = randn(12,2);  </cmd>
        <descr> Restrict the parameters to a unitbox of the size 5. </descr>
        <cmd> Ath = [eye(2); -eye(2)]; bth = 5*ones(4,1); </cmd>
        <descr> Construct the object </descr>
        <cmd> problem = Opt('H',eye(4),'f',f,'A',A,'b',b,'pB',B,'Ath',Ath,'bth',bth) </cmd>
        <descr> Solve the problem </descr>
        <cmd> solution = problem.solve </cmd>
        <descr> Since we have an explicit solution, we can plot the partition </descr>
        <cmd> solution.xopt.plot </cmd>
    </example>
    <example>
        <descr> Formulate LCP problem </descr>
        <cmd> H = randn(5); M = sqrt(2)*H'*H; q = randn(5,1); </cmd>
        <descr> Construct the object </descr>
        <cmd> problem = Opt('M',M,'q',q); </cmd>
        <descr> Solve the problem </descr>
        <cmd> problem.solve </cmd>        
    </example>
    <example>
        <descr> Formulate MPC parametric problem using YALMIP </descr>
        <descr> Define the model <i>x_{k+1} = Ax_{k} + Bu{k} </i>. </descr>
        <cmd> A = 0.7*randn(2); B = randn(2,1); </cmd>
        <descr> Define the optimization variables </descr>
        <cmd> u = sdpvar(repmat(1,1,5),repmat(1,1,5)); </cmd>
        <cmd> x = sdpvar(repmat(2,1,6),repmat(1,1,6)); </cmd>
        <descr> Define the constraints and the cost function. </descr>
        <cmd> objective = []; constraints = []; </cmd>
        <cmd> for k = 1:5,
                objective = objective + norm(eye(2)*x{k},2) + norm(u{k},2);
                constraints = [constraints, x{k+1} == A*x{k} + B*u{k}];                
                constraints = [constraints, -5 &lt;= u{k} &lt;= 5, -10 &lt;= x{k} &lt;= 10];
              end            
        </cmd>
        <descr> Create the object </descr>
        <cmd> problem = Opt(constraints, objective, x{1}, u{1}) </cmd>
        <descr> Solve the problem explicitly </descr>
        <cmd> solution = problem.solve </cmd>
        <descr> Plot the explicit solution </descr>
        <cmd> solution.xopt.plot </cmd>
    </example>
    <example>
        <descr> Formulate MPC problem using MPT2 </descr>
        <cmd> sysStruct.A = 0.7*randn(2); </cmd>
        <cmd> sysStruct.B = randn(2,1); </cmd>
        <cmd> sysStruct.C = [1, -1]; </cmd>
        <cmd> sysStruct.D = 0; </cmd>
        <cmd> sysStruct.xmin = [-10;-10]; </cmd>
        <cmd> sysStruct.xmax = [10;10]; </cmd>
        <cmd> sysStruct.umin = -5; </cmd>
        <cmd> sysStruct.umax = 5; </cmd>
        <cmd> probStruct.Q = 2*eye(2); </cmd>
        <cmd> probStruct.R = 1; </cmd>
        <cmd> probStruct.subopt_lev = 0; </cmd>
        <cmd> probStruct.norm = 2; </cmd>
        <cmd> probStruct.N = 5; </cmd>
        <descr> Create problem data to MPQP </descr>
        <cmd> Matrices = mpt_constructMatrices(sysStruct,probStruct) </cmd>
        <descr> Construct object of the <tt>Opt</tt> class. </descr>
        <cmd> problem = Opt(Matrices) </cmd>
        <descr> Solve the problem </descr>
        <cmd> solution = problem.solve </cmd>
        <descr> Plot the control law over the explicit solution </descr>
        <cmd> solution.xopt.fplot('primal') </cmd>
    </example>
    
	<!-- multiple authors can be defined -->
    <author macro="author_cnj"/>
	<author macro="author_herceg"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
