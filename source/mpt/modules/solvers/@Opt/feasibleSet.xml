<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>feasibleSet</function>
	
	<!-- one-line description of the function -->
	<info>
        Computes the feasible set of a given parametric problem.
	</info>
	
    <syntax>K = prob.feasibleSet()</syntax>
    <syntax>K = prob.feasibleSet('method')</syntax>
    <syntax>K = prob.feasibleSet(regions)</syntax>

    
	<!-- long description of the function -->
	<descr>
        Method for computing a feasible set of a given parametric problem. For the 
        following formulation of a parametric problem
             <latex>\begin{eqnarray*}
                 \text{min} ~~  J(z, x) \\
                 \text{s.t.} ~~  Az \le b + Bx \\
                    A_{e}z = b_{e} + Ex
                    \end{eqnarray*}
             </latex>              
             the feasible set <tt>K</tt> is the polyhedron
             <latex>\begin{equation}
                 K = \{ x ~|~ \exists ~z~ \text{s.t.} ~ Az \le b+Bx, A_{e}z=b_{e}+Ex \}
                 \end{equation}
             </latex>
             
             This method implements two procedures to compute <tt>K</tt>:
             <ol>
                 <li> if <tt>K=prob.feasibleSet('method')</tt> is called, the feasible set is
                     calculated by a given 'method' used in projection (can be expensive)
                 </li>
                 <li> if <tt>K=prob.feasibleSet(regions)</tt> is called with "regions"
                     being the critical regions of the parametric solution,
                     then K is constructed as follows.
                     For each facet of each region do:
                     <ol>
                         <li> compute the center of the facet </li>
                         <li> take a small step accross the facet </li>
                         <li> solve the problem for the new point </li>
                         <li> if the problem is infeasible, add the facet to
                         the feasible set </li>
                     </ol>
                 </li>
             </ol>
    
     </descr>
	<!-- now describe input arguments -->
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="false">
		<name>method</name>
        <descr>A string describing which method of projection to use for computing the feasible set. For more help of the
            methods type <tt>help Polyhedron/projection</tt>.    
        </descr>
		<class name="char"/>
	</input>
	<input required="false">
		<name>regions</name>
        <descr>A polyhedron array for which to describe the feasible set. The polyhedra must be in the same dimension.</descr>
		<class name="Polyhedron"/>
	</input>
    <output>
		<name>K</name>
        <descr> The computed feasible set for the given parametric optimization problem.            
        </descr>
		<class name="Polyhedron"/>
	</output>
    
    <example>
        <descr> Create parametric LP with 3 decision variables and 2 parameters </descr>
        <descr> The cost function <i>(F\theta + f)^{T}x</i> </descr>
        <cmd> f = [1; -1; 0.5]; pF = [1 -1.2; -0.8 -2.1; 3.1 0]; </cmd>
        <descr> The linear inequality constraints <i>Ax\le b + B\theta</i></descr>
        <cmd> A = [-11.15 -16.28 -8.09; 6.85 16.17 11.61; 10.37 2.64  5.92; 18.22 -11.28 2.42; -5.29 -5.6 2.4];</cmd>
        <cmd> b = [ 1.43; 3.49; 3.98; 2.2; 2.23]; </cmd>
        <cmd> B = [ -0.11 0.5; -0.89 -0.83; 0.74 0.2; 1.39 -1.01; 2.47 -0.62]; </cmd>
        <descr> Provide bounds on the parameters <i>A_{\theta}\theta \le b_{\theta} </i> </descr>
        <cmd> Ath = [eye(2); -eye(2)]; bth = [2;2;5;5]; </cmd>
        <descr> Create the parametric optimization problem </descr>
        <cmd> problem = Opt('f',f,'A',A,'b',b,'pB',B,'pF',pF,'Ath',Ath,'bth',bth) </cmd>
        <descr> We want to compute the feasible set of the parametric optimization problem.</descr>
        <cmd> K = problem.feasibleSet() </cmd>
        <descr> The feasible set represents a region where there exist a feasible set of constraints.
             Now compute the solution by solving the parametric optimization problem: </descr>
        <cmd> res = problem.solve </cmd>
        <descr> The parametric solver returns regions with the optimal solution to the 
        parametric optimization problem. The union of these regions is a subset of the 
            feasible set <tt>K</tt> because in some parts of the feasible space the cost 
            function can be unbounded and therefore the optimality conditions do not hold.
        </descr>        
        <descr> On the figure below one can see that in this example the union of regions returned
        from the parametric solver is a subset of the feasible set <tt>K</tt>.</descr>
        <cmd> K.plot('wire',true,'linewidth',2,'linestyle','--');
            hold on;
            res.xopt.plot
        </cmd>
    </example>

	<!-- multiple related function can be defined -->
    <related>Opt</related>
	 
	<!-- multiple authors can be defined -->
	<author macro="author_kvasnica"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
