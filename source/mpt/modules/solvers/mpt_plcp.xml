<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>mpt_plcp</function>
	
	<info>
		Parametric linear complementarity solver (PLCP) (without errorchecks)
	</info>

    <syntax>R = mpt_plcp(S)</syntax>

    <descr>
		Implementation of the lexicographic PLCP solver. The PLCP is given as:
        <latex>
            \begin{eqnarray}
            w - Mz = q + Q\theta  \label{eq:mpt_solvemp:LCP-1}\\
            w \ge 0 \label{eq:mpt_solvemp:LCP-2}\\
            z \ge 0 \label{eq:mpt_solvemp:LCP-3}\\
            {w}(\theta)^{T}z(\theta) = 0 \label{eq:mpt_solvemp:LCP-4}\\
            {A}_{\theta}\theta \le  {b}_{\theta}  \label{eq:mpt_solvemp:LCP4} \\            
            \end{eqnarray} 
        </latex>
        where the matrices <i>M</i>, <i>Q</i>, <i>A_{\theta}</i>, and vectors <i>q</i>,<i>b_{\theta}</i> are the 
        problem data, then <i>z</i>, <i>w</i> are the decision variables and <i>\theta</i> are the parameters.

        Structure of the algorithm:
        <ol>
            <li> <bf>Initialisation phase:</bf> For any feasible starting point <i>\theta_{f}</i> solve non-parametric
            LCP to get feasible basis. The basis is used to determine the initial region <i>P_{0}</i> with the corresponding
                optimal pair <i>w</i> and <i>z</i>. 
            </li>
            <li> <bf>Exploration phase:</bf> For each facet of the initial region <i>P_{0}</i> compute its neighbors <i>P_{i}</i>
            by performing lex-pivot steps in the PLCP subproblem. Compute the graph based on the found neighbors. Store
            basis of every region to a corresponding hash-table. </li>
            <li> <bf>Termination phase:</bf> Verify the graph of the solution, evaluate the statistics. </li>
        </ol>
        
        The algorithm uses variable step approach for exploration of the parameter space by default. The fixed step approach
        can be turned on via option <tt>fixed_step</tt>. Parameter exploration is based on a graph search: depth-first search (BFS) 
        and breadth-first search (BFS) methods are considered, the default is BFS.
        
        When the computer runs in a parallel mode, the exploration phase run in a parallel for-loop automatically, which 
        can potentially increases the computational speed.
        
        Any change in default options must be done using <tt>mptopt</tt> class. Following options can be modified:
        <ul>
            <li><bf>bfs</bf> - Logical value that determines if to use BFS for exploration of the parameter space (default=1).</li>
            <li><bf>dfs</bf> - Logical value that determines if to use DFS for exploration of the parameter space (default=0).</li>
            <li><bf>debug</bf> - Integer value that determines the debugging level (default=0).</li>
            <li><bf>maxlayers</bf> - For BFS-type of exploration, this value limits the number of "layers" starting from the 
            initial region <i>P_{0}</i>. The first layer is defined as the collection of regions that are adjacent to <i>P_0</i>,
                the second layer is given as the new found neighbors to all regions in the first layer etc. The default value is <tt>Inf</tt>.
            </li>
            <li><bf>maxregions</bf> - The maximal number of regions to be produced by PLCP algorithm. This option is useful when solving
            large PLCP problems when there are memory problems. The default value is <tt>Inf</tt>.
            </li>
            <li><bf>QRfactor</bf> - Logical value that select the type of factorization to use for pivoting. If true, then recursive QR
            factorization is used instead of direct sparse LU factorization by default. The default value is 0.</li>
            <li><bf>checkoverlaps</bf> - Logical value that launches overlap checking if true. Very time consuming operation, therefore the
            default value is 0. </li>
            <li><bf>rescue</bf> - If the variable step approach fails to find all the neighbors, this logical statement indicates if the use
                the fixes-step approach as a backup. If true, then the fixed-step approach is run whenever variable step approach does not 
            find overlaps. The disadvantage of fixed step is, however, overlaps can be produced, specially for degenerate cases. The
            default value is 0.
            </li>
            <li> <bf>maxsteps</bf> - If the fixed step approach is turned on, this value limits the number of steps to be performed to find 
                neighbor. The step size is given by the <tt>region_tol</tt>. The default value is 200.
            </li>
            <li> <bf>maxpivots</bf> - The maximum limit on the lex-pivot steps to be performed when finding a neighbor. Typically, it suffices
                1-2 pivots to find a neighbor. If the problem is very degenerate, or badly posed, or due to numerical problems involved in
            factorization, the pivot steps are repeated up to 100-times, which is the default value. </li>
            <li> <bf>cacheregions</bf> - This flag causes that regions that have been discovered are remembered and used
            for faster exploration of the parameter space. The default value is 1. </li>
            
        </ul>

        Note that to properly preprocess data to PLCP, use <tt>Opt</tt> class whenever possible. This will avoid unnecessary 
        numerical problems caused by improper formulation of the problem.
        
	</descr>
	<!-- now describe input arguments -->
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>S</name>
        <descr>Structure of the <tt>Opt</tt> class.</descr>
        <class name="struct">
            <field>
                <name>M</name>
                <descr>Data matrix for linear-complementarity problem <i>w-Mx=q</i>.</descr>
                <class name="double"/>
            </field>
            <field>
                <name>q</name>
                <descr>Right hand side vector for linear-complementarity problem <i>w-Mx=q</i>.</descr>
                <class name="double"/>
            </field>
            <field>
                <name>Ath</name>
                <descr>Linear part of the inequality constraints <i>A_{\theta}\theta \le b_{\theta}</i>.</descr>
                <class name="double"/>
                <default>[]</default>
            </field>
            <field>
                <name>bth</name>
                <descr>Right hand side of the inequality constraints <i>A_{\theta}\theta \le b_{\theta}</i>.</descr>
                <class name="double"/>
                <default>[]</default>
            </field>
            <field>
                <name>recover</name>
                <descr>Affine map for MPLP/MPQP problems after transformation to LCP.</descr>
                <class name="struct">
                    <field>
                        <name>uX</name>
                        <descr>Matrix of the affine map <i>x = \text{uX}\begin{pmatrix} w\\z \end{pmatrix} + \text{uTh}\begin{pmatrix} \theta \\ 1 \end{pmatrix} </i>.
                            The map is from the optimization variables involed in LCP <i> w(\theta),z(\theta) \mapsto x </i> and in the original LP/QP.
                        </descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>
                    <field>
                        <name>uTh</name>
                        <descr>Matrix of the affine map <i>x = \text{uX}\begin{pmatrix} w\\z \end{pmatrix} + \text{uTh}\begin{pmatrix} \theta \\ 1 \end{pmatrix} </i>. 
                          The map is from the optimization variables involed in LCP <i> w(\theta),z(\theta) \mapsto x </i> and in the original LP/QP.
                    </descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>
                    <field>
                        <name>lambdaX</name>
                        <descr>Matrix of the affine map <i>x = \text{lambdaX}\begin{pmatrix} w\\z \end{pmatrix} + \text{lambdaTh}\begin{pmatrix} \theta \\ 1 \end{pmatrix} </i>.
                        The map is from the optimization variables involed in LCP <i> w(\theta),z(\theta) \mapsto \lambda </i> and the Lagrangian multipliers in the original LP/QP.
                    </descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>
                    <field>
                        <name>lambdaTh</name>
                        <descr>Matrix of the affine map <i>x = \text{lambdaX}\begin{pmatrix} w\\z \end{pmatrix} + \text{lambdaTh}\begin{pmatrix} \theta \\ 1 \end{pmatrix} </i>.
                        The map is from the optimization variables involed in LCP <i> w(\theta),z(\theta) \mapsto \lambda </i> and the Lagrangian multipliers in the original LP/QP.
                        </descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>
                </class>
                <default>[]</default>
            </field>
            <field>
                <name>Internal</name>
                <descr>Internal data that came from transformation from LP/QP to LCP.</descr>
                <class name="struct">
                    <field>
                        <name>H</name>
                        <descr>Quadratic part of the objective function.</descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>
                    <field>
                        <name>f</name>
                        <descr>Linear part of the objective function.</descr>
                        <class name="double"/>
                    </field>
                    <field>
                        <name>pF</name>
                        <descr>Linear part of the objective function for parameters.</descr>
                        <class name="double"/>
                        <default>[]</default>
                    </field>                                
                </class>
                <default>[]</default>
            </field>            
        </class>
	</input>
	
	<!-- now describe output arguments -->
	<output>
		<name>R</name>
		<descr>Result structure</descr>
		<class name="struct">
			<field>
				<name>xopt</name>
                <descr>Partition of the polyhedra with the associated function values for <i>z</i> and <i>w</i> variables.</descr>
				<class name="PolyUnion"/>
			</field>
            <field>
				<name>exitflag</name>
				<descr>An integer value that informs if the result was feasible (1), or otherwise (different from 1).</descr>
				<class name="double"/>
			</field>
            <field>
				<name>how</name>
				<descr>A string that informs if the result was feasible ('ok'), or if any problem appeared through optimization.</descr>
				<class name="char"/>
			</field>
            <field>
				<name>solveTime</name>
				<descr>How long did the computation take in seconds.</descr>
				<class name="double"/>
			</field>            
            <field>
				<name>stats</name>
				<descr>Statistical information about the computation: the total number of pivots performed, the total number of facets traversed.</descr>
                <class name="struct">
                    <field>
                        <name>pivs</name>
                        <descr>The total number of pivots performed.</descr>
                        <class name="double"/>
                    </field>                    
                    <field>
                        <name>facetsTraversed</name>
                        <descr>The total number of facets that have been traversed. </descr>
                        <class name="double"/>
                    </field>
                </class>
			</field>                        
		</class>
	</output>


	<!-- multiple related function can be defined -->
    <related>mpt_solvemp</related>
    <related>lcp</related>

	<!-- multiple literature sources can be given -->
    <literature macro="lcp_book"/>
    <literature macro="plcp"/>
	
	<!-- multiple authors can be defined -->
    <author macro="author_cnj"/>
	<author macro="author_herceg"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
