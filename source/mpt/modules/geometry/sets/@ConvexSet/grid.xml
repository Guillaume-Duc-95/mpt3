<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>grid</function>
	
	<!-- one-line description of the function -->
	<info>
		Grid the convex set.
	</info>
	
	<syntax>x = grid(Set, N)</syntax>
	<syntax>x = Set.grid(N)</syntax>

	<!-- long description of the function -->
	<descr>
        Gridding of the convex <tt>Set</tt> with respect to <tt>N</tt> linearly scaled gridding points. 
        The output <tt>x</tt> consist of points sorted vertically that belonging to the <tt>Set</tt>.

        The principle of the algorithm is as follows:
        <ol>
            <li>Compute outer bounding hypercube.</li>
            <li>Grid the hypercube.</li>
            <li>Test each point for inclusion in the set, discarding those outside.</li>
        </ol>
        Before running the algorithm, consider the number <tt>N</tt> of gridding points. If this number
        is very large then it takes algorithm longer to grid the space because an exhaustive search is 
        done at the last step of the algorithm.        
        
	</descr>
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>Set</name>
        <descr>Any object derived from the <tt>ConvexSet</tt> class, e.g. <tt>Polyhedron</tt>, <tt>YSet</tt>, ...</descr>
		<class name="ConvexSet"/>
	</input>
    <input>
        <name>N</name>
        <descr>The number of gridding point. It specifies with how many elements to scale the interval equidistantly.</descr>
    </input>

    
	<!-- now describe output arguments -->
	<output>
		<name>x</name>
        <descr>An array of points sorted vertically. The number of columns specifies the dimension.</descr>
		<class name="double"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example> 
        <descr> The set is given as intersection of two sets. </descr>
        <cmd> x = sdpvar(2,1);  </cmd>
        <cmd> F = [x(1)-x(2)&lt;=1; 0.3*x'*x &lt;= 0.5]; </cmd>
        <cmd> Y = YSet(x,F); </cmd>        
        <descr> Grid the set with 40 gridding points (can take some time). </descr>
        <cmd> x = Y.grid(30); </cmd>
        <descr> Plot each point </descr>
        <cmd> plot(x(:,1),x(:,2),'x','MarkerSize',7) </cmd>
    </example>
    <example>
        <descr> We have two polyhedra that intersect</descr>
        <cmd> P(1) = Polyhedron('A',[1 -0.3; 0.5 0.7],'b',[2.3;3.1],'lb',[1;0.4]); </cmd>
        <cmd> P(2) = Polyhedron('A',[1.6 -0.6; 0.2 0.4],'b',[2.1;2.8],'lb',[1.5;0.9]); </cmd>
        <descr> Plot the sets </descr>
        <cmd> P.plot </cmd>
        <descr> Find the intersection and grid it </descr>
        <cmd> Q = intersect(P(1),P(2)); </cmd>
        <cmd> x = Q.grid(40); </cmd>
        <descr> Plot the grid points of the intersection </descr>
        <cmd> plot(x(:,1),x(:,2),'o','Color','r');axis([1 3.5 0 7]); </cmd>
    </example>

    <!-- multiple related function can be defined -->
	<related>plot</related>
    <related>fplot</related>
    <related>contains</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
