<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>getFunction</function>
	
	<!-- one-line description of the function -->
	<info>
		Extract function handle from a convex set.
	</info>
	
	<syntax>F = getFunction(Set, FuncName)</syntax>
	<syntax>F = Set.getFunction(FuncName)</syntax>

	<!-- long description of the function -->
	<descr>
        Extract  <tt>Function</tt> object that is attached to a convex  <tt>Set</tt> 
        under the name <tt>FuncName</tt>. 
	</descr>
	<!-- now describe input arguments -->
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>Set</name>
        <descr>Any object derived from the <tt>ConvexSet</tt> class, e.g. <tt>Polyhedron</tt>, <tt>YSet</tt>, ...</descr>
		<class name="ConvexSet"/>
	</input>

    <input required="true">
		<name>FuncName</name>
        <descr>Name of the function to extract.</descr>
		<!-- any class name can be used, it can even be omitted -->
		<class name="char"/>
	</input>

	<!-- now describe output arguments -->
	<output>
		<name>F</name>
        <descr>Function object stored under the <tt>FuncName</tt> string.</descr>
		<class name="Function"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example>
        <descr> The polyhedron contains two functions "a" and "b".</descr>
        <cmd> P = ExamplePoly.randHrep; </cmd>
        <cmd> P.addFunction(AffFunction([1, -2]),'a'); </cmd>
        <cmd> P.addFunction(QuadFunction([0 0.4;-0.1 0.2]),'b'); </cmd>        
        <descr> Extract the function "b" from the set </descr>
        <cmd> F = P.getFunction('b') </cmd>
    </example>

	<!-- multiple related function can be defined -->
    <related>addFunction</related>
    <related>removeFunction</related>	
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>
    <author macro="author_kvasnica"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
