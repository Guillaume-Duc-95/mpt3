<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>outerApprox</function>
	
	<info>Computes outer bounding box of the convex set.</info>
	<syntax>B = outerApprox(S)</syntax>
	<syntax>B = S.outerApprox</syntax>

	<descr>
	  Compute the smallest axis-aligned hypercube that contains this set. The lower and upper bounds
        of the hypercube are stored under <tt>Internal</tt> property, i.e. <tt>Internal.lb</tt> for lower
        bound and <tt>Internal.ub</tt> for upper bound.
	</descr>

	<input required="true">
	  <name>S</name>
      <descr>Any set derived from <tt>ConvexSet</tt> class, e.g. <tt>YSet</tt> or <tt>Polyhedron</tt>.</descr>
	  <class name="ConvexSet"/>
	</input>

	<output>
	  <name>B</name> 
      <descr>Bounding box <i>B</i> described as <tt>Polyhedron</tt> in H-representation.</descr>
	  <class name="Polyhedron"/>
	</output>

    <example>
        <descr>Describe circle in 2D using YALMIP</descr>
        <cmd>x = sdpvar(2,1);</cmd>
        <cmd>F = [x'*x&lt;=1];</cmd>
        <cmd>S = YSet(x,F); </cmd>
        <descr> The bounding box for the circle is a cube with diameter 1. </descr>
        <cmd> B = S.outerApprox </cmd>
        <descr> Plot the sets </descr>
        <cmd> S.plot; hold on; B.plot </cmd>
    </example>
    <example>
        <descr>We have a lower dimensional polyhedron in 3D.</descr>
        <cmd> P = Polyhedron('A',randn(9,3),'b',ones(9,1),'Ae', randn(1,3),'be',0.5);</cmd>
        <descr> Compute the bounding box</descr>
        <cmd> B = P.outerApprox; </cmd>
        <descr> Plot the sets such that the outer approximation is wired. </descr>
        <cmd> P.plot; hold on; B.plot('wire',true,'LineWidth',3) </cmd>
    </example>
    
	
	<!-- multiple related function can be defined -->
	<related>support</related>
    <related>separate</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_cnj"/>
	<author macro="author_herceg"/>
	
	<license macro="GPL2"/>
</help>
