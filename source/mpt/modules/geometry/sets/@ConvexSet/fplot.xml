<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>fplot</function>
	
	<!-- one-line description of the function -->
	<info>
		Plot function over the set.
	</info>
	
	<syntax>h = fplot(Set, name, dim, 'Prop1', value1, 'Prop2', value2)</syntax>
	<syntax>h = Set.fplot(name, dim, 'Prop1', value1, 'Prop2', value2)</syntax>

	<!-- long description of the function -->
	<descr>
        Plot function over the set. If there are more functions, then the string <tt>name</tt> identifies
        the function to be plotted. By default, only the first function is plotted. If the function 
        is vector valued, i.e. its range is greater than 1, than the first element of the 
        function is plotted by default. For vector valued functions the <tt>dim</tt> indicates 
        which element of the vector to plot.

        Figure properties, such as color, line width, etc, can be specified with "Property" - "Value" pairs. 
	</descr>
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>Set</name>
        <descr>Any object derived from the <tt>ConvexSet</tt> class, e.g. <tt>Polyhedron</tt>, <tt>YSet</tt>, ...</descr>
		<class name="ConvexSet"/>
	</input>
	<input>
		<name>name</name>
        <descr>If there are more functions over the set, the <tt>pos</tt> indicates the position of the function 
        in the array by index or by a function name. Stored functions can be accessed inside <tt>Func</tt>
        property.
        </descr>
		<class name="char"/>
	</input>
	<input>
		<name>dim</name>
        <descr>For vector valued functions, the <tt>dim</tt> indicates which element of the vector to plot.</descr>
		<class name="double"/>
        <default>1</default>
	</input>
	<input>
		<name>Prop1</name>
        <descr>Specification of figure properties.</descr>
		<class name="char">
                <option>Grid</option><descr>With how many gridpoints to grid the circle/sphere. Default is 40.</descr>
                <option>Color</option><descr>The color of the plot specified by real RGB vector or a string name of the color (e.g. 'gray');</descr>
                <option>Wire</option><descr>Highlight or not the edges of the set. Default is false.</descr>
                <option>LineStyle</option><descr>Specify the type of the line to plot edges of the set. Accepted values are '-',':','-.','--', and'none'.</descr>
                <option>LineWidth</option><descr>Specify the width of the line. Default is 1.</descr>
                <option>Alpha</option><descr>Transparency of the color. The value must be inside [0,1] interval. Default is 1.</descr>
                <option>Contour</option><descr>Add contour graph. Default is false.</descr>
                <option>ContourGrid</option><descr>With how many grid point to do the contour graph. Default is 20.</descr>
                <option>Polyhedron</option><descr>Plot the domain of the function. Default is false.</descr>
		</class>
	</input>
    <input>
        <name>value1</name>
        <descr>Assigns value to <tt>Prop1</tt>.</descr>
    </input>

    
	<!-- now describe output arguments -->
	<output>
		<name>h</name>
        <descr>Handle related to graphics object.</descr>
		<class name="handle"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example> 
        <descr> Plot one function over one dimensional set.</descr>
        <descr> The set is an interval [-1, 2]</descr>
        <cmd> P = Polyhedron('lb',-1,'ub',2); </cmd>
        <descr> Assign a quadratic function <i>f(x) = x^2-x+3 </i> under name "f" to the set <tt>P</tt> </descr>
        <cmd> Q = QuadFunction(1,-1,3); </cmd>
        <cmd> P.addFunction(Q,'f'); </cmd>
        <descr> Plot the function </descr>
        <cmd> P.fplot </cmd>
    </example>
    <example>
        <descr> We have two linear functions "a", "b"  over a convex set.</descr>
        <descr> Construct the set first as the intersection of a circle and linear inequality </descr>
        <cmd> x = sdpvar(2,1); </cmd>
        <cmd> F = [0.5*x'*x&lt;=0.2; [-1, 0.6]*x&lt;=0.5]; </cmd>
        <cmd> S = YSet(x,F); </cmd>
        <descr> Construct quadratic and linear function.</descr>
        <cmd> Q = QuadFunction([1 -2;3 0.5],[-1,0], -1.4); </cmd>
        <cmd> L = AffFunction([2.6,-0.2], 0.7); </cmd>
        <descr> Add functions to the set with names "a" and "b". </descr>
        <cmd> S.addFunction(Q,'a'); </cmd>
        <cmd> S.addFunction(L,'b'); </cmd>
        <descr> Plot the function "b" based on the index  </descr>
        <cmd> S.fplot('b'); </cmd>
    </example>
    <example> 
        <descr> We have three affine and vector valued functions over the set <tt>S</tt>. </descr>
        <descr> Construct the set first as the intersection of a circle and linear inequality </descr>
        <cmd> x = sdpvar(2,1); </cmd>
        <cmd> F = [0.5*x'*x&lt;=0.2; [-3,0.4]*x&lt;=0.5]; </cmd>
        <cmd> S = YSet(x,F); </cmd>
        <descr> Construct three affine functions and put them in an array.</descr>
        <cmd> A1 = AffFunction([-0.4,0.9; -1, 0.3], [0.4; 0.7]); </cmd>
        <cmd> A2 = AffFunction([0.7,-0.1; -2, 0.7], [0.3; -0.1]); </cmd>
        <cmd> A3 = AffFunction([0.7,-0.1; -0.6 5], [0.3; 0.2]); </cmd>
        <descr> add these functions to the set <tt>S</tt> with some names </descr>
        <cmd> S.addFunction(A1, 'mon'); </cmd>
        <cmd> S.addFunction(A2, 'wed'); </cmd>
        <cmd> S.addFunction(A3, 'fri'); </cmd>
        <descr> Plot the second element of the function "fri" in gray color.</descr>
        <cmd> S.fplot('fri',2,'Color','gray') </cmd>
        <descr> Plot the second element of the function "mon" and the set with some transparency.</descr>
        <cmd> S.fplot('mon',2,'polyhedron',true,'alpha',0.6) </cmd>

    </example>

	<!-- multiple related function can be defined -->
	<related>plot</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>
	<author macro="author_kvasnica"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
