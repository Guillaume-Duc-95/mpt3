<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>fplot</function>
	
	<!-- one-line description of the function -->
	<info>
		Plot single function over the polyhedron or array of polyhedra.
	</info>
	
    <syntax>h = P.fplot()</syntax>
    <syntax>h = P.fplot('name', 'Prop1', value1, 'Prop2', value2)</syntax>
	<syntax>h = fplot(P, 'name', 'Prop1', value1, 'Prop2', value2)</syntax>

	<!-- long description of the function -->
	<descr>
        Plot single function over a polyhedron or array of polyhedra. If there are more functions, then <tt>name</tt> indicates
        the string under which the function is attached to a set. 
        If the function is vector valued, i.e. its range is greater than 1, 
        than the first element of the function value is plotted by default. For vector valued functions
        use the <tt>position</tt> property if you want a different element of the function value to plot.

        Figure properties, such as color, line width, etc, can be specified with "Property" - "Value" pairs. 
	</descr>
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>Polyhedron</name>
        <descr>Polyhedron in any format.</descr>
		<class name="Polyhedron"/>
	</input>
	<input>
		<name>name</name>
        <descr>If there are more functions associated to the polyhedron, the <tt>name</tt> indicates the 
        function name. By default, only the first function is plotted.
        Functions can be accessed by referring to <tt>Func</tt> property.</descr>
		<class name="char"/>
        <default>1</default>
	</input>
	<input>
		<name>dim</name>
        <descr>For vector valued functions, the <tt>dim</tt> indicates which element of the vector to plot.</descr>
		<class name="double"/>
        <default>1</default>
	</input>
	<input>
		<name>Prop1</name>
        <descr>Specification of figure properties.</descr>
		<class name="char">
                <option>position</option><descr>For vector valued functions, the <tt>position</tt> indicates which element of the function value to plot.</descr>
                <option>Color</option><descr>The color of the plot specified by real RGB vector or a string name of the color (e.g. 'gray').</descr>
                <option>Wire</option><descr>Highlight the edges of the set. Default is false.</descr>
                <option>LineStyle</option><descr>Specify the type of the line to plot edges of the set. Accepted values are '-',':','-.','--', and'none'.</descr>
                <option>LineWidth</option><descr>Specify the width of the line. Default is 1.</descr>
                <option>Alpha</option><descr>Transparency of the color. The value must be inside [0,1] interval. Default is 1.</descr>
                <option>Contour</option><descr>Add contour graph. Default is false.</descr>
                <option>ContourGrid</option><descr>With how many grid point to do the contour graph. Default is 30.</descr>
                <option>show_set</option><descr>Plot the polyhedron with the function. Default is false.</descr>
                <option>Grid</option><descr>With how many gridpoints to grid the polyhedron. Default is 20.</descr>
                <option>ColorMap</option><descr>Color map given either as a M-by-3 matrix, or as a string. Default is 'mpt'.
                                            Other available options are 'hsv', 'hot', 'gray', 'lightgray', 'bone', 'copper', 
                                            'pink', 'white', 'flag', 'lines', 'colorcube','vga', 'jet', 'prism', 'cool',
                                            'autumn', 'spring', 'winter', 'summer'.
                                            </descr>
                <option>ColorOrder</option><descr>Either 'fixed' for fixed ordering of colors, or 'random' for a random order. Default is 'fixed'.</descr>
		</class>
	</input>
    <input>
        <name>value1</name>
        <descr>Assigns value to <tt>Prop1</tt>.</descr>
    </input>

    
	<!-- now describe output arguments -->
	<output>
		<name>h</name>
        <descr>Handle related to graphics object.</descr>
		<class name="handle"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example> 
        <descr> Plot one function over one dimensional polyhedron.</descr>
        <descr> The set is an interval [0, 1]</descr>
        <cmd> P = Polyhedron('lb',0,'ub',1); </cmd>
        <descr> Assign a quadratic function <i>f(x) = x^2+1 </i> under name "f" to it </descr>
        <cmd> Q = QuadFunction(1,0,1); </cmd>
        <cmd> P.addFunction(Q,'f'); </cmd>
        <descr> Plot the function "f" with the polyhedron in dark olive green color.</descr>
        <cmd> P.fplot('f','show_set',true,'Color','darkolivegreen','LineWidth',3)</cmd>
    </example>
    <example>
        <descr> We have two linear functions "friction", "gain" over one polyhedron.</descr>    
        <descr> Construct the functions. The first function maps from <i> R^2 \mapsto R^1</i>.</descr>
        <cmd> L1 = AffFunction([3 -1],2) </cmd>
        <descr> The second function is vector valued because it maps from <i>R^2 \mapsto R^2</i>.</descr>
        <cmd> L2 = AffFunction([1 0; -1 -2], [0.7;0.1]) </cmd>
        <descr> Add functions to the set with names "friction" and "gain". </descr>
        <cmd> S = ExamplePoly.randVrep; </cmd>
        <cmd> S.addFunction(L1,'friction'); </cmd>
        <cmd> S.addFunction(L2,'gain'); </cmd>
        <descr> Plot first elements from both functions</descr>
        <cmd> S.fplot('friction','color','b'); hold on; S.fplot('gain','color','m'); hold off </cmd>
        <descr> Plot the second element of the vector valued function "gain" over the wired polyhedron.</descr>
        <cmd> S.fplot('gain','position',2,'show_set',true,'wire',true); </cmd>
    </example>

	<!-- multiple related function can be defined -->
	<related>plot</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>
	<author macro="author_kvasnica"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
