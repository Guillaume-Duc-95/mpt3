<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>eq</function>
  
  <info>
    Returns true if the set covered by polyhedra <i>P</i> is the same as the set covered by <i>S</i> and false otherwise.
  </info>
  <syntax>tf = P.eq(S)</syntax>
  <syntax>tf = P == S</syntax>

  <descr> 
    Returns true if <i>P</i> equals <i>S</i> and false otherwise by testing if both <i>P \subseteq S</i> and <i>S
    \subseteq P</i>.
  </descr>
  
  <input required="true">
    <name>P</name>
    <descr>Polyhedron in any format or array of Polyhedra in H-representation.</descr>
    <class name="Polyhedron"/>
  </input>
  <input required="true">
    <name>S</name>
    <descr>Polyhedron (or array of polyhedra) in the same dimension as <tt>P</tt>.</descr>
    <class name="Polyhedron"/>
  </input>

  <output>
    <name>tf</name>
    <descr>True if <tt>S == P</tt> and false otherwise.</descr>
    <class name="logical">
      <option>true</option>
      <option>false</option>
    </class>
  </output>
  
  <example>
    <descr>Create a polytope:</descr>
    <cmd>P = ExamplePoly.poly3d_sin</cmd>
    <descr>Create a V-representation of the same polytope</descr>
    <cmd>S = Polyhedron(Polyhedron(P).computeVRep)</cmd>
    <descr>Test equivalence:</descr>
    <cmd>P == S</cmd>
  </example>
  
  <example>
    <descr>Create arrays of polytope in the same dimension</descr>
    <cmd>P(1) = ExamplePoly.randHrep;</cmd>
    <cmd>P(2) = ExamplePoly.randHrep('ne',1);</cmd>
    <descr>Create a copy of this array</descr>
    <cmd>S = Polyhedron(Polyhedron(P))</cmd>
    <descr>The arrays of polyhedra should cover the same set</descr>
    <cmd>P == S</cmd>
  </example>
  
  <related>neq</related>
  <related>contains</related>
  <related>le</related>
  <related>lt</related>
  <related>ge</related>
  <related>gt</related>
  
  
  <author macro="author_cnj"/>
  <author macro="author_herceg"/>
  <license macro="GPL2"/>
</help>
