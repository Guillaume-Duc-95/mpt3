<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>projection</function>
  
  <!-- one-line description of the function -->
  <info>
    Compute the projection of the Polyhedron.
  </info>
  <!-- we can define multiple ways to call the function -->
  <!-- note that we can freely use the underscore in function names -->
  <syntax>p = P.projection(dims, method)</syntax>
  <syntax>p = projection(P, dims, method)</syntax>
  <syntax>p = projection(P, dims, method, solver)</syntax>
  
  <descr>
    Computes the polyhedron <i>p</i>
    <latex>
      \[
      p = \{x\ |\ x = y(\text{dims}),\ y \in P\}
      \]
    </latex>
  </descr>
  <!-- now describe input arguments -->
  
  <!-- mark inputs as mandatory by providing the "required" attribute -->
  <input required="true">
    <name>P</name>
    <descr>Polyhedron in any format</descr>
    <!-- any class name can be used, it can even be omitted -->
    <class name="Polyhedron"/>
  </input>
  <input required="true">
    <name>dims</name>
    <descr>Dimensions upon which to project</descr>
    <class name="double"/>
  </input>
  <input required="false">
    <name>method</name>
    <descr>Sets the method used to compute the projection. If omitted, then the method is
    chosen based on the properties of <i>P</i> and <i>dims</i>.</descr> 
    <class name="char">  
      <option>fourier</option><descr>: Use fourier elimination. Good if projecting off a small number of
           dimensions. Projection will be highly redundant (use <tt>q.minHRep()</tt> to get
           irredundant form).</descr>
      <option>mplp</option><descr>: Use mplp algorithm to compute projection. Good if the projection is
           not very degenerate (dimensions of projected facets are equal to the faces that
           they were projected from)</descr>
      <option>vrep</option><descr>: Compute vertex representation and then project</descr>
    </class>
  </input>
  <input>
      <name>solver</name>
      <descr>If "mplp" method is selected, then this argument determines which solver to use for solving MPLP problem.
      By default the first parametric solver is selected from the list of available solvers. </descr>
      <class name="char"/>
  </input>
  
  <output>
    <name>p</name><descr>Projection of <i>P</i> onto the dimensions <i>dims</i></descr>
    <class name="Polyhedron"/>
  </output>
  
  <example>
    <descr>Create random polytope:</descr>
    <cmd>P = ExamplePoly.randVrep('d',3) + [0;0;5];</cmd>
    <descr>Compute projection:</descr>
    <cmd>p = P.projection(1:2)</cmd>
    <descr>Plot the result</descr>
    <cmd>plot([P,p-[0;1]])</cmd>
  </example>
  
  <example>
    <descr>Create random polyhedron:</descr>
    <cmd>P = ExamplePoly.randHrep('ne',1,'d',3,'nr',1) + [0;0;5];</cmd>
    <descr>Compute projection:</descr>
    <cmd>p = P.projection(1:2)</cmd>
    <descr>Plot the result</descr>
    <cmd>plot([P,p]);</cmd>
  </example>

  <example>
    <descr>Create zonotope:</descr>
    <cmd>Z = ExamplePoly.randZono('d',5,'n',8);</cmd>
    <descr>Project onto R3 and plot:</descr>
    <cmd>Z.projection(1:3).plot;</cmd>
  </example>
  
  <related>project</related>
  
  <author macro="author_cnj"/>
  <license macro="GPL2"/>

</help>
