<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>isConvex</function>
	
	<info>Test if the union of polyhedra is convex.</info>
	<syntax>ts = U.isConvex</syntax>
	<syntax>ts = isConvex(U)</syntax>

	<descr>
	  Return true if the union <tt>U</tt> of polyhedra is convex and false otherwise.
      Once this method has been called, the information about the convexity can be retrieved
        from <tt>U.Internal.Convex</tt> property.
        <bf>Note that this function is very computationally demanding and is suitable for
        unions with small number of polyhedra. </bf>
	</descr>

	<input required="true">
	  <name>U</name>
	  <descr>Union of polyhedra in the same dimension.</descr>
	  <class name="PolyUnion"/>
	</input>

	<output>
	  <name>ts</name> 
	  <descr>True if union of polyhedra is convex and false otherwise.</descr>
	  <class name="logical">
	    <option>true</option>
	    <option>false</option>
	  </class>
	</output>

    <example>
        <descr>Create a random polyhedron in V-representation.</descr>
        <cmd>P = 10*ExamplePoly.randVrep;</cmd>
        <descr> Triangulate polyhedron to get a partition. </descr>
        <cmd> T = P.triangulate </cmd>
        <descr> Create union out of these polyhedra without specifying the properties</descr>
        <cmd> U = PolyUnion(T) </cmd>
        <descr>Check if the union is convex</descr>
        <cmd> U.isConvex </cmd>
        <descr> We can plot the union to see that it is truly convex. </descr>
        <cmd> U.plot </cmd>
    </example>

	
	<!-- multiple related function can be defined -->
	<related>isConnected</related>
    <related>isOverlapping</related>
    <related>isFullDim</related>
    <related>isBounded</related>
	
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>
   
    <license macro="GPL2"/>
</help>
