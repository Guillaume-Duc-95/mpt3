<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>feval</function>
	
	<!-- one-line description of the function -->
	<info>
        Evaluates a given function defined over a union of polyhedra.
	</info>
	
    <syntax>fval = U.feval(x)</syntax>
    <syntax>fval = U.feval(x, function_name)</syntax>
    <syntax>[fval, feasible, idx, tb_value] = U.feval(x, function_name)</syntax>
    <syntax>[fval, feasible, idx, tb_value] = feval(U, x, function_name)</syntax>

	<!-- long description of the function -->
	<descr>
        Evaluates function for a given value of the point <tt>x</tt> over the union of polyhedra <tt>U</tt> characterized
        by the name <tt>function_name</tt>. If the string <tt>function_name</tt> is omitted, it is assumed that only one 
        function is attached to the union.
        The dimension of the vector <tt>x</tt> must be the same as the dimension of the <tt>PolyUnion</tt>.
        If the point lies outside of the union, the result is <tt>NaN</tt>.
        
    Notes:<br />
    <ul>
        <li> <tt>U</tt> must be a single union. Arrays of unions are not accepted. Use
            <tt>array.forEach(@(e) e.feval(...))</tt> to evaluate arrays of unions.
        </li>
        <li>
            <tt>function_name</tt> must refer to a single function. If omitted, <tt>U.feval(x)</tt>
            only works if the union has a single function.
        </li>
    </ul>
    
    <bf>Outputs</bf><br />
    <ol>
        <li> <tt>x</tt> is not contained in any polyhedron of the union:
        
            <tt>fval</tt> = <i>(m \times 1)</i> vector of <tt>NaNs</tt>, where <i>m</i> is the range of the function,
            <tt>feasible = false</tt>,
            <tt>idx = [] </tt>,
            <tt>tb_value = []</tt>.
        </li>
        <li>
            <tt>x</tt> is in a single polyhedron:
            
            <tt>fval</tt> = <i>(m \times 1)</i> vector of function values,
            <tt>feasible = true</tt>,
            <tt>idx</tt> = index of the set which contains <tt>x</tt>,
            <tt>tb_value = []</tt>.
        </li>
        <li>
            <tt>x</tt> is contained in multiple polyhedra (either at the boundary or in
            strict interior if there are overlaps), no tie-breaking (default):
            
            <tt>fval</tt> = <i>(m \times j)</i> matrix of function values (<i>j</i> denotes the number of
            polyhedra which contain <i>x</i>), each column contains the value of <tt>function_name</tt>
            in the corresponding set,
            <tt>feasible = true</tt>,
            <tt>idx</tt> = <i>(1 \times j)</i> vector of indices of polyhedra which contain <tt>x</tt>,
            <tt>tb_value = []</tt>.
        </li>
        
        <li> <tt>x</tt> is contained in multiple polyhedra (either at the boundary or in
            strict interior if there are overlaps), tie-breaking enabled (see
            below):
            
            <tt>fval</tt> = <i>(m \times 1)</i> vector containing the function value in the polyhedra in
            which value of the tie-breaking function is smallest (if there
            are multiple polyhedra with the same tie-breaking value, the first
            such set is considered),
            <tt>feasible = true</tt>,
            <tt>idx</tt> = index of the polyhedron which contains <tt>x</tt> and, simultaneously, has
            the <bf>smallest</bf> value of the tie-breaking function,
            <tt>tb_value</tt> = scalar value of the tie-breaking function in a polyhedron indexed
            by <tt>idx</tt>.
        </li>
    </ol>
        
    <bf>Tie-breaking</bf><br />

 The purpose of tie-breaking is to automatically resolve situations
 where the evaluation point <tt>x</tt> is contained in multiple polyhedra. With
 tie-breaking enabled <tt>PolyUnion/feval()</tt> evaluates the tie-breaking function
 to decide which polyhedron containing <tt>x</tt> should be used for evaluation of
 the original function.
 
 The tie-breaking function can be specified by <tt>U.feval(x, 'tiebreak',
 tb_fun)</tt>, where <tt>tb_fun</tt> can be either a string or a function
 handle. A string value must refer to an another function which exists
 in the union <tt>U</tt>.
 
 A typical case where tie-breaking is useful is evaluation of
 discontinuous MPC feedback laws:
 
 <tt>uopt = U.feval(x, 'primal', 'tiebreak', 'obj')</tt>
 
 Here, if <tt>x</tt> is contained in multiple polyhedra, then the function <tt>primal</tt>
 is only evaluated in the polyhedron which contain <tt>x</tt> and simultaneously has
 the <bf>smallest</bf> value of the tie-breaking function <tt>obj</tt>.
 
 A special case of tie-breaking is the "first-set" rule where we are
 only interested in evaluating a function in the first polyhedron which
 contains <tt>x</tt> (despite the fact there can be multiple such sets). This
 is achieved by
 
 <tt>fval = U.feval(x, 'function_name', 'tiebreak', @(x) 0)</tt>
 
 Notes:
 <ul>
     <li> Tie-breaking functions must be scalar-valued.</li>
     <li> No tie-breaking is done by default. </li>
 </ul>
 
 <bf>Evaluation in particular polyhedra</bf><br />
 
 <tt>fval = U.feval(x, 'myfun', 'regions', indices)</tt> evaluates function
 <tt>myfun</tt> over all polyhedra indexed by <tt>indices</tt>. The output <tt>fval</tt> is
 always an <i>(m \times j)</i> matrix, where <i>j</i> is the cardinality of <tt>indices</tt>.
 
 Note that once the <tt>regions</tt> option is enabled, <tt>PolyUnion/feval()</tt> will not
 perform point location. Instead, it will evaluate the function in all
 polyhedra indexed by <tt>indices</tt>, regardless of whether they contain <tt>x</tt> or
 not.
 
 The <tt>regions</tt> option allows to quickly evaluate multiple functions as
 follows:
 
 <tt>[first_value, idx] = U.feval(x, 'first_function')</tt>
 <tt>second_value = U.feval(x, 'second_function', 'regions', idx)</tt>
 
 In the second call, <tt>PolyUnion/feval</tt> will only evaluate <tt>second_function</tt>
 in polyhedra specified by the <tt>indices</tt> option, hence skipping expensive
 point location.

    
	</descr>
	<!-- now describe input arguments -->
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>U</name>
        <descr>Union of polyhedra in the same dimension.</descr>
		<class name="PolyUnion"/>
	</input>
	<input required="true">
		<name>x</name>
        <descr>A point at which the function should be evaluated. The point must be given as a column 
        real vector with the same dimension as the <tt>PolyUnion</tt>.</descr>
		<class name="double"/>
	</input>
	<input>
		<name>function_name</name>
        <descr>Name of the function to evaluate. The string must match one of the stored function names.
            If there is only one function attached, this argument can be omitted.
        </descr>
		<!-- any class name can be used, it can even be omitted -->
		<class name="char"/>
	</input>

    
	<!-- now describe output arguments -->
	<output>
		<name>fval</name>
        <descr>Function value at the point <tt>x</tt> over the <tt>PolyUnion</tt> <tt>U</tt>.</descr>
		<class name="double"/>
	</output>
    <output>
		<name>feasible</name>
        <descr>Logical value indicating if the point <tt>x</tt> is contained in the union or not.</descr>
        <class name="logical">
                <option>1</option>
                <option>0</option>
        </class>
	</output>
    <output>
		<name>idx</name>
        <descr>Vector of indices of polyhedra that contain the point <tt>x</tt>.</descr>
        <class name="double"/>
	</output>
    <output>
		<name>tb_value</name>
        <descr>Value of the tie-breaking function if the point belongs to multiple polyhedra.</descr>
        <class name="double"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example> 
        <descr> PWA function over polyhedral complex.</descr>
        <descr> Define one bounded polyhedron in dimension 3.</descr>
        <cmd> P = ExamplePoly.randVrep('d',3); </cmd>
        <descr> Triangulate the polyhedron </descr>
        <cmd> T = P.triangulate; </cmd>
        <descr> Add linear function to each polyhedron <i>T</i> in the array under the name "a". </descr>
        <cmd> T.addFunction(AffFunction([1 -2 0]),'a'); </cmd>
        <descr> For each polyhedron in the array add second function 'b'. </descr>
        <cmd> for i=1:length(T), T(i).addFunction(AffFunction(rand(1,3),rand(1)),'b'); end </cmd>
        <descr> Create union out of polyhedra <i>T</i> with some properties. </descr>
        <cmd> U = PolyUnion('Set',T,'Convex',true,'Bounded',true,'Overlaps',false); </cmd>
        <descr> Evaluate the PWA function "a" for a point inside the polyhedron <i>P</i>. </descr>
        <cmd> x = P.interiorPoint.x; </cmd>
        <cmd> y = U.feval(x,'a') </cmd>
        <descr> Evaluate function a with respect to a tie-breaking function 'b' </descr>
        <cmd> yn = U.feval(x,'a','tiebreak','b') </cmd>
    </example>

	<!-- multiple related function can be defined -->
	<related>fplot</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>
    <author macro="author_kvasnica"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
