<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>removeFunction</function>
	
	<!-- one-line description of the function -->
	<info>
		Remove function from all sets in the union based on the function name.
	</info>
	
	<syntax>U = removeFunction(U,name)</syntax>
	<syntax>U.removeFunction(name)</syntax>

	<!-- long description of the function -->
	<descr>
        Removes <tt>Function</tt> object from the union of convex sets
        identified by the string <tt>name</tt>. The functions stored with 
        the union can be retrieved using <tt>listFunctions</tt> method.
        The name of the function must match with one of the names stored in the array.
    </descr>
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>U</name>
        <descr>Object of the <tt>Union</tt> class that holds objects derived from the <tt>ConvexSet</tt> class.</descr>
		<class name="Union"/>
	</input>

    <input required="true">
		<name>name</name>
        <descr>Name of the function to remove from the union. 
        String must match one of the names as retrieved by <tt>listFunctions</tt>
        method. For multiple names, provide <tt>pos</tt> as a cell array of strings.</descr>
		<!-- any class name can be used, it can even be omitted -->
		<class name="char"/>
	</input>

	<!-- now describe output arguments -->
	<output>
		<name>U</name>
        <descr>Modified object of the <tt>Union</tt> class without the function handles that has been removed.</descr>
		<class name="PolyUnion"/>
	</output>

	<!-- we can provide multiple code examples -->
    <example>
        <descr> Create an union of two Yalmip sets that two functions.</descr>
        <descr> Define sets in 2D </descr>
        <cmd> x = sdpvar(2,1); </cmd>        
        <cmd> F1 = [ [1, -2; 0.4, 5]*x&lt;= [1;2]]; </cmd>
        <cmd> F2 = [ [5, -3; 1.3, -2; 0.8 -9; 1 -0.3]*x&lt;= [1;2;1;1.5]]; </cmd>
        <cmd> Y(1) = YSet(x,F1); </cmd>
        <cmd> Y(2) = YSet(x,F2); </cmd>
        <descr> Define the functions</descr>
        <cmd> f1 = AffFunction([0.1,-3],2); </cmd>
        <cmd> f2 = AffFunction([-2,0.5],0.4);</cmd>
        <descr> Add these functions to the sets</descr>
        <cmd> Y.addFunction(f1,'f1'); </cmd>
        <cmd> Y.addFunction(f2,'f2'); </cmd>
        <descr> Create the <tt>Union</tt> object. </descr>
        <cmd> U = Union(Y) </cmd>
        <descr> Remove the function "f2" from the set </descr>
        <cmd> U.removeFunction('f2') </cmd>
        <descr> Union of sets now contains only 'f1' function </descr>
        <cmd> U.listFunctions </cmd>
    </example>

	<!-- multiple related function can be defined -->
    <related>addFunction</related>
    <related>removeAllFunctions</related>
	
	
	<!-- multiple authors can be defined -->
	<author macro="author_herceg"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
