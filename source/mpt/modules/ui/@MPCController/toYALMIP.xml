<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>toYALMIP</function>
  
  <info>
    Converts an MPC problem into YALMIP's constraints and objective
  </info>
  <syntax>yalmipdata = controller.toYALMIP()</syntax>

  <descr> 
    This function convers an MPC optimization problem into YALMIP. The
    output structure contains following fields:
    <ul>
      <li><tt>constraints</tt>: contains constraints of the MPC
      problem as YALMIP's <tt>lmi</tt> object.</li>
      <li><tt>objective</tt>: scalar variable of type <tt>sdpvar</tt>
      which defines the optimization objective.</li>
      <li><tt>variables</tt>: structure containing variables of the
      optimization problem.</li>
    </ul>

    This method is MPT3 replacement of MPT2's <tt>ownmpc</tt>
    mechanism. In short, <tt>toYALMIP</tt> allows to modify the MPC
    problem by adding new constraints and/or by modifying the
    objective function.
  </descr>

  <output>
    <name>yalmipdata</name>
    <descr>Structure containing constraints, objective, and variables
    of the MPC problem.</descr>
    <class name="struct"/>
  </output>

  <example>
    <descr>Create a 1D LTI system <i>x^+ = 0.9x + u</i>.</descr>
    <cmd>sys = LTISystem('A', 0.9, 'B', 1);</cmd>

    <descr>Define an MPC controller.</descr>
    <cmd>ctrl = MPCController(sys);</cmd>

	<descr>Specify constraints, penalties, and the prediction horizon.</descr>
    <cmd>
		ctrl.model.x.min = -5; ctrl.model.x.max = 5;
		ctrl.model.u.min = -5; ctrl.model.u.max = 5;
		ctrl.model.x.penalty = Penalty(1, 2);
		ctrl.model.u.penalty = Penalty(1, 2);
		ctrl.N = 3;
	</cmd>

	<descr>Obtain the optimal sequence of inputs over the whole
    prediction horizon for the initial condition <tt>x0=3</tt>.</descr>
    <cmd>[~, ~, openloop] = ctrl.evaluate(3); openloop.U</cmd>

	<descr>Convert the problem to YALMIP and add custom state constraints 
	on the first two predicted inputs via YALMIP.</descr>
    <cmd>
		Y = ctrl.toYALMIP()
		Y.constraints = Y.constraints + [ -0.5 &lt;= Y.variables.u(:, 1) &lt;= 0.5];
		Y.constraints = Y.constraints + [ -0.8 &lt;= Y.variables.u(:, 2) &lt;= 0.8];
		ctrl.fromYALMIP(Y);
		x0 = 3;
		[~, ~, openloop] = ctrl.evaluate(x0); openloop.U
	</cmd>
    <descr>Notice that the updated controller respects constraints
    added via YALMIP.</descr>

  </example>

  <related>fromYALMIP</related>

  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
