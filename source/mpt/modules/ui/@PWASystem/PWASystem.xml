<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>PWASystem</function>
  
  <info>
    Represents discrete-time piecewise affine systems
  </info>
  <syntax>sys = PWASystem([lti1, lti2, ..., ltiM])</syntax>

  <descr> 
    This class represents PWA systems, which are composed of a finite
    number of local affine dynamics, each valid in a corresponding
    polyhedral region of the state-input space:
    <latex>
      \begin{align*}
        x(t+Ts) &amp; = A_i x(t) + B_i u(t) + f_i \ \text{if} \ (x,u)
	\in R_i\\
	y(t) &amp; = C_i x(t) + D_i u(t) + g_i
      \end{align*}
    </latex>
    where <i>x \in \mathbb{R}^{n_x}</i> is the state vector, <i>u \in
    \mathbb{R}^{n_u}</i> is the vector of inputs, <i>y \in
    \mathbb{R}^{n_y}</i> is the vector of outputs, <i>T_s</i>
    represents the sampling time, and <i>R_i</i> are the polyhedral
    regions of validity of the <i>i</i>-th local dynamics.<br/>

    Each PWA system defines following properties:
    <ul>
      <li><tt>A</tt>, <tt>B</tt>, <tt>f</tt>: matrices of the
      state-update equation, stored as cell arrays (read-only)</li>
      <li><tt>C</tt>, <tt>D</tt>, <tt>g</tt>: matrices of the
      output equation, stored as cell arrays (read-only)</li>
      <li><tt>Ts</tt>: sampling time (read-only)</li>
      <li><tt>domain</tt>: array of polyhedra denoting domain of the
      <i>i</i>-th local model (read-only)</li>
      <li><tt>nx</tt>, <tt>nu</tt>, <tt>ny</tt>: number of states,
      inputs and outputs (automatically determined, read-only)</li>
      <li><tt>ndyn</tt>: number of local models (read-only)</li>
      <li><tt>x</tt>: specifications of system's states (see <tt>help
      SystemSignal</tt>)</li>
      <li><tt>u</tt>: specifications of system's inputs (see <tt>help
      SystemSignal</tt>)</li>
      <li><tt>y</tt>: specifications of system's outputs (see <tt>help
      SystemSignal</tt>)</li>
      <li><tt>d</tt>: specifications of the binary dynamics selector
      signal (see <tt>help SystemSignal</tt>)</li>
    </ul>

    The preferred way to define a PWA system consisting of a finite
    number of local affine models is to provide the list of LTI models
    to the <tt>PWASystem</tt> constructor:<br/>

    <tt>pwasys = PWASystem([ltisys1, ltisys2, ..., ltisysM])</tt><br/>

    Here, each LTI model must have its domain defined by the
    <tt>ltisys.setDomain()</tt> method (see "<tt>help
    LTISystem/setDomain</tt>").
  </descr>

  <example>
    <descr>We create a PWA system, consisting of two local affine
    models.</descr>
    <descr>The first model is given by <i>x^+ = x + u</i>, and is
    valid for <i>x \geq 0</i>.</descr>
    <cmd>sys1 = LTISystem('A', 1, 'B', 1);</cmd>
    <cmd>sys1.setDomain('x', Polyhedron('lb', 0));</cmd>
    <descr>The second model has dynamics <i>x^+ = -2x + 0.5u</i>, and
    is valid if <i>x \leq 0</i>.</descr>
    <cmd>sys2 = LTISystem('A', -2, 'B', 0.5);</cmd>
    <cmd>sys2.setDomain('x', Polyhedron('ub', 0));</cmd>
    <descr>Create the PWA system using <tt>sys1</tt> and
    <tt>sys2</tt>:</descr>
    <cmd>pwa = PWASystem([sys1, sys2])</cmd>
  </example>

  <related>LTISystem</related>

  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
