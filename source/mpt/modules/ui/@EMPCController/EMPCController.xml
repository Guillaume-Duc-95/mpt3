<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>EMPCController</function>
  
  <info>
    Explicit MPC controller
  </info>
  <syntax>ctrl = EMPCController(model, horizon)</syntax>
  <syntax>ctrl = EMPCController(MPCController)</syntax>

  <descr> 
    Constructs the explicit form of an MPC controller.

    The particular type of the optimization problem to be solved
    parametrically is determined by the type of the prediction model
    and by its parameters. For a more detailed information, see
    "<tt>help MPCController</tt>".<br/>

    Instances of the <tt>EMPCController</tt> class expose following
    properties:
    <ul>
      <li><tt>model</tt>: the prediction model used in the MPC
      setup;</li>
      <li><tt>N</tt>: the prediction horizon</li>
      <li><tt>optimizer</tt>: the explicit optimizer as an instance of
      the <tt>PolyUnion</tt> class;</li>
      <li><tt>partition</tt>: the polyhedral partition of the explicit
      feedback law as an instance of the <tt>Polyhedron</tt> class;</li>
      <li><tt>feedback</tt>: the explicit representation of the
      feedback law as an instance of the <tt>PolyUnion</tt> class;</li>
      <li><tt>cost</tt>: the explicit representation of the
      optimal cost function as an instance of the <tt>PolyUnion</tt>
      class.</li> 
    </ul>

    The <tt>optimizer</tt> property is available for read/write
    access. This allows, for instance, to remove overlaps from multiple 
	overlapping partitions by <tt>ctrl.optimizer = ctrl.optimizer.merge()</tt>.
  </descr>
  
  <input required="true">
      <name>model</name>
      <descr>Any MPT3 system (<tt>LTISystem</tt>, <tt>PWASystem</tt>,
      <tt>MLDSystem</tt>)</descr> 
      <class name="AbstractSystem"/>
  </input>
  <output>
    <name>ctrl</name>
    <descr>Explicit MPC controller</descr>    
  </output>

  <example>
    <descr>Create a 2D LTI system</descr>
    <cmd>
		A = [1 1; 0 1]; B = [1; 0.5]; C = [1 0]; D = 0;
		sys = LTISystem('A', A, 'B', B, 'C', C, 'D', D)
	</cmd>

	<descr>Define constraints</descr>
    <cmd>
		sys.x.min = [-5; -5]; sys.x.max = [5; 5];
		sys.u.min = -1; sys.u.max = 1;
		sys.y.min = -5; sys.y.max = 1;
	</cmd>

	<descr>Define penalties (we use squared two-norm with unity
    weights here)</descr>
    <cmd>
		sys.x.penalty = Penalty(eye(2), 2);
		sys.u.penalty = Penalty(1, 2);
	</cmd>

	<descr>Construct the explicit MPC controller</descr>
    <cmd>
		horizon = 3;
		ctrl = MPCController(sys, horizon).toExplicit()
	</cmd>

	<descr>Plot the optimal feedback law</descr>
    <cmd>ctrl.feedback.fplot()</cmd>

	<descr>Plot the optimal cost function</descr>
    <cmd>ctrl.cost.fplot()</cmd>

	<descr>Plot the polyhedral partition</descr>
    <cmd>ctrl.partition.plot()</cmd>
  </example>

  <related>MPCController</related>


  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
