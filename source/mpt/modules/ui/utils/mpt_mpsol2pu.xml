<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>mpt_mpsol2pu</function>
  
  <info>
    Converts a parametric solution generated by solvemp to a PolyUnion object
  </info>
  <syntax>pu = mpt_mpsol2pu(sol)</syntax>

  <descr> 
    <tt>pu = mpt_mpsol2pu(sol)</tt> converts a solution obtained by
    YALMIP's <tt>solvemp()</tt> function to a <tt>PolyUnion</tt>
    object. This allows to easily convert <tt>solvemp</tt> solutions
    into explicit MPC controllers by <tt>ctrl =
    EMPCController(mpt_mpsol2pu(sol))</tt>.<br/>

    This function produces an instance of the <tt>PolyUnion</tt> class
    whose polyhedral partition is taken from <tt>sol.Pn</tt>. The
    primal optimizer (given by <tt>sol.Fi</tt> and <tt>sol.Gi</tt>) is
    assigned to the <tt>primal</tt> function of the polyunion, while
    the cost (represented by <tt>sol.Ai</tt>, <tt>sol.Bi</tt>, and
    <tt>sol.Ci</tt>) is converted to the <tt>obj</tt> function of the
    union.<br/>

    Note that, if the input solution contains overlapping partitions,
    then an array of polyunions will be returned. Each element of such
    an array then represents the corresponding overlapping partition
    of the input solution. If the objective function is piecewise
    affine, you can subsequently remove the overlaps by calling <tt>pu
    = pu.min('obj')</tt>.
  </descr>
  
  <input required="true">
      <name>sol</name>
      <descr>Solution obtained by <tt>solvemp</tt></descr> 
      <class name="cell"/>
  </input>

  <output>
      <name>pu</name>
      <descr>Parametric optimizer represented as an instance of the
      <tt>PolyUnion</tt> class</descr> 
      <class name="PolyUnion"/>
  </output>

  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
