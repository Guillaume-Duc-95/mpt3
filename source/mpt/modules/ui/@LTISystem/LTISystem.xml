<?xml version="1.0" encoding="utf-8" ?>

<help>
  <function>LTISystem</function>
  
  <info>
    Represents linear time-invariant systems
  </info>
  <syntax>sys = LTISystem('A', A, 'B', B, 'C', C, 'D', D, 'T_s', Ts)</syntax>

  <descr> 
    This class represents linear time-invariant systems of the form
    <latex>
      \begin{align*}
        x(t+Ts) &amp; = A x(t) + B u(t)\\
	y(t) &amp; = C x(t) + D u(t)
      \end{align*}
    </latex>
    where <i>x \in \mathbb{R}^{n_x}</i> is the state vector, <i>u \in
    \mathbb{R}^{n_u}</i> is the vector of inputs, <i>y \in
    \mathbb{R}^{n_y}</i> is the vector of outputs, and <i>T_s</i>
    represents the sampling time.<br/>

    Each LTI system defines following properties:
    <ul>
      <li><tt>A</tt>, <tt>B</tt>: matrices of the
      state-update equation (read-only)</li>
      <li><tt>C</tt>, <tt>D</tt>: matrices of the
      output equation (read-only)</li>
      <li><tt>Ts</tt>: sampling time (read-only)</li>
      <li><tt>nx</tt>, <tt>nu</tt>, <tt>ny</tt>: number of states,
      inputs and outputs (automatically determined, read-only)</li>
      <li><tt>x</tt>: specifications of system's states (see <tt>help
      SystemSignal</tt>)</li>
      <li><tt>u</tt>: specifications of system's inputs (see <tt>help
      SystemSignal</tt>)</li>
      <li><tt>y</tt>: specifications of system's outputs (see <tt>help
      SystemSignal</tt>)</li>
    </ul>

    To define an LTI system, provide the list of system's matrices to
    the constructor:<br/>
    
    <tt>sys = LTISystem('A', A, 'B', B, 'C', C, 'D', D, 'Ts', Ts)</tt>

    All inputs, except of the <tt>A</tt> matrix, can be omitted. In
    such a case they are set to empty matrices of corresponding
    dimension. As a consequence, one can easily define autonomous
    systems <i>x(t+T_s) = A x(t) + f</i> by calling <tt> sys =
    LTISystem('A', A, 'f', f, 'Ts', Ts)</tt>. Similarly, to define an
    LTI system without outputs, call <tt>sys = LTISystem('A', A, 'B',
    B, 'Ts', Ts)</tt>. If the sampling time is omitted, it is set to
    <tt>Ts=1</tt>.<br/>

    Another option to define an LTI system is to import the dynamics
    from Control toolbox' discre-time state-space objects:<br/>

    <tt>sys = LTISystem(ss(A, B, C, D, Ts))</tt>

    Important to remember is that LTI systems carry with them the
    value of the state vector. The initial value can be set by the
    <tt>sys.initialize(x0)</tt> method (see "<tt>help
    LTISystem/initialize</tt>"). Value of the internal state can be
    retrieved by the <tt>sys.getStates()</tt> method (see "<tt>help
    LTISystem/getStates</tt>"). To update the internal state using the
    system's state-update equation, use the <tt>sys.update(u)</tt>
    function (see "<tt>help LTISystem/update</tt>").
  </descr>

  <example>
    <descr>Create a 1D LTI system <i>x^+ = 2x + u</i>, <i>y = 3x</i></descr>
    <cmd>sys = LTISystem('A', 2, 'B', 1, 'C', 3)</cmd>
  </example>

  <related>PWASystem</related>

  <author macro="author_kvasnica"/>
  <license macro="GPL2"/>
</help>
