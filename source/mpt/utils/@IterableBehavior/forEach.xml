<?xml version="1.0" encoding="utf-8" ?>

<help>
	<function>forEach</function>
	
	<!-- one-line description of the function -->
	<info>
        Applies a given function to each element of in an array of sets.
	</info>
    
    <syntax>A = obj.forEach(@myfun)</syntax>
    <syntax>A = obj.forEach(@(x) myfun(x))</syntax>
    <syntax>A = obj.forEach(@(x) x.myfun)</syntax>
    
	<!-- long description of the function -->
	<descr>
             The method <tt>forEach</tt> is an overloaded method of standard
             <tt>arrayfun</tt> or <tt>cellfun</tt> that applies to arrays of sets.			 
             To apply method MYFUN to all elements of the array of
			 objects OBJ, you can use any of the following ways:<br />
             <ul>
             <li><tt>obj.forEach(@myfun)</tt></li>
             <li><tt>obj.forEach(@(x) myfun(x))</tt></li>
             <li><tt>obj.forEach(@(x) x.myfun)</tt></li>
             </ul>
                 
             Note that <tt>forEach</tt> will not return any outputs if not asked
			 to. Outputs can be requested as well: <br />

             <tt>[A, B, C] = obj.forEach(@myfun)</tt>
			 
			 If MYFUN generates all its outputs as scalars, then A, B, and
			 C will be arrays with as many elements as there are elements
			 in the array OBJ.  
             
			 If outputs generated by MYFUN have different sizes for
			 different elements of OBJ, then you must set the
			 "UniformOutput" option to false:<br />             
             
             <tt>[A, B, C] = obj.forEach(@myfun, 'UniformOutput', false) </tt> 
             
             In this case <tt>A</tt>, <tt>B</tt>, and <tt>C</tt> will be cell arrays, with 
             A{i}, B{i} and C{i} containing the output of MYFUN applied to the
			 i-th element of OBJ.  

             In short, the <tt>forEach</tt> method works exactly as <tt>arrayfun</tt>
             and <tt>cellfun</tt>, hence see "help arrayfun" for a more throught
			 description.
    </descr>
	<!-- now describe input arguments -->
	
	<!-- mark inputs as mandatory by providing the "required" attribute -->
	<input required="true">
		<name>@myfun</name>
        <descr> A handle to a function that is to be applied to each element in the array of sets for object <tt>obj</tt>.
        </descr>
        <class name="function_handle"/>
	</input>
	
	<!-- now describe output arguments -->
	<output>
		<name>A</name>
        <descr> Array or cell array of outputs returned by function <tt>@myfun</tt> that correspond to individual outputs 
        from the array of sets <tt>obj</tt>. </descr>
        <class name=""/>
	</output>

    <example>
        <descr> Create array of 5 random polyhedra </descr>
        <cmd> for i=1:5; P(i)=ExamplePoly.randVrep; end </cmd>
        <descr> For each polyhedron in the array execute the function <tt>outerApprox</tt> </descr>
        <cmd> B = P.forEach(@outerApprox) </cmd>
        <descr> In B we have computed the outer bounding boxes for each polyhedron in the array. It is the same
            results if asked</descr>        
        <cmd> Bnew = P.outerApprox </cmd>
    </example>
    
    <example>
        <descr> Create two unions of polyhedra in different dimensions</descr>
        <cmd> U(1) = PolyUnion([ExamplePoly.randVrep;ExamplePoly.randVrep]); </cmd>
        <cmd> U(2) = PolyUnion([ExamplePoly.randVrep('d',3);ExamplePoly.randVrep('d',3)]); </cmd>
        <descr> For each polyunion in the array extract the convexity property that is computed by <tt>isConvex</tt> method.</descr>
        <cmd> ts = U.forEach(@isConvex)</cmd>
        <descr> The same result can be obtained by </descr>
        <cmd> tn = U.isConvex </cmd>
    </example>
    
    
	<!-- multiple related function can be defined -->
	<related>Polyhedron</related>
    <related>ConvexSet</related>
	
	<!-- multiple authors can be defined -->
	<author macro="author_kvasnica"/>
    <author macro="author_herceg"/>

	<!-- finally, the text of the license -->
	<license macro="GPL2"/>
</help>
