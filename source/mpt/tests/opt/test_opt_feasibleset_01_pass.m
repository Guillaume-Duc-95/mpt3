function test_opt_feasibleset_01_pass
% feasible set of a pQP

% expected result
Hexp = [-0.49247421340048 0 2.4623710670024;-0.447213595499958 0 2.23606797749979;-0.54418562527958 0 2.7209281263979;-0.468482674028186 0 2.34241337014093;-0.937383809922039 0 4.6869190496102;1.43825808976988 0 7.19129044884939;-0.58582764992254 0 2.9291382496127;0.544185625279579 0 2.7209281263979;0.447213595499958 0 2.23606797749979;-1.43825808976988 0 7.19129044884939;2.01295015414965 0 10.0647507707482;1.70232102178632 1.70232102178632 10.2139261307179;0.937383809922038 0 4.68691904961019;-0.65139462755062 0 3.2569731377531;0.492474213400481 0 2.46237106700241;0.468482674028186 0 2.34241337014093;-2.01295015414965 0 10.0647507707483;-1.70232102178632 -1.70232102178632 10.2139261307179;-2.18086416169592 0 10.9043208084796;2.18086211251612 2.18086211251612 13.0851726750967;1.83983294061235 3.67966588122469 13.7987470545926;0.839076699744494 5.71282531911604 13.79874428575;0.58582764992254 0 2.9291382496127;2.18086416169592 0 10.9043208084796;-2.18086211251612 -2.18086211251612 13.0851726750967;-1.83983294061235 -3.67966588122469 13.7987470545926;-0.839076699744494 -5.71282531911604 13.79874428575;0.65139462755062 0 3.2569731377531];
Kexp = Polyhedron('H', Hexp);

%% QP without equalities
Double_Integrator;
M = mpt_constructMatrices(sysStruct, probStruct);
pqp = Opt(M);
sol = pqp.solve();

% use projection
K = pqp.feasibleSet();
assert(K==Kexp);

% use regions
K = pqp.feasibleSet(sol.xopt.Set);
assert(K==Kexp);

%% the same QP but with equalities
model = mpt_import(sysStruct, probStruct);
mpc = MPCController(model, probStruct.N);
Y = mpc.toYALMIP();
pqp = Opt(Y.constraints, Y.objective, Y.internal.parameters, Y.variables.u(:));
assert(pqp.me>0);

% use projection
K = pqp.feasibleSet();
assert(K==Kexp);

% use regions
K = pqp.feasibleSet(sol.xopt.Set);
assert(K==Kexp);

% make sure the original problem stayed unchanged
assert(pqp.me>0);

end
