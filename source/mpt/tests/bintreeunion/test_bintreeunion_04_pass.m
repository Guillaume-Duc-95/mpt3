function test_bintreeunion_04_pass
% 4D example (stress test)

V = [0.968738782888443 0.75845413880865 0.0849654152048388 -0.799387818281326;0.964287533424538 -0.62688222974632 0.988902668359574 -0.197238902627264;-1.1628635166916 0.517632259199248 -0.764156394098693 0.306721479505752;-0.462476523083534 -0.371682066378852 0.221545893967743 -1.32991624987666;0.245435878886361 1.30917190093652 -0.175883398585537 1.53340336955156;0.0785045252546367 1.86779935384685 -0.947265908527478 0.213866702122705;-1.35735991737637 1.27282494988538 -1.435037878788 1.9701871136737;-0.0618952937755032 -1.38492800839453 -2.92819319546037 0.261964661827609;-0.617562947704806 3.92152798247788 -0.389446162632483 -1.28358725849093;-0.859067812142446 -0.828142165889497 2.43534297159317 -0.0161771857813181;-0.0589742512643361 -0.364736723689656 -1.69600870670995 1.03298222263904];
P = Polyhedron(V);
assert(P.isFullDim);
U = PolyUnion(P.triangulate());
assert(U.Num==32);

%% construct the tree
Tree = BinTreePolyUnion(U);

%% test point location
% make regions a bit smaller to avoid points on facets
B = Polyhedron('lb', -1e-3*ones(U.Dim, 1), 'ub', 1e-3*ones(U.Dim, 1));
R = U.Set-B;
for i = 1:U.Num
	x = R(i).grid(3);
	for j = 1:size(x, 1)
		% each point must be contained in the i-th region
		[isin, inwhich] = Tree.contains(x(j, :)');
		assert(isin);
		assert(inwhich==i);
	end
end

end
