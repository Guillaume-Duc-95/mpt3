function test_polyhedron_setdiff_28_pass
%
% racy case where the output should be a single polytope

P = Polyhedron('H', [-0.253964091093372 -0.967213647771327 1.58281932575177;-0.707106781186547 -0.707106781186547 1.76776695296637;0.554700196225229 0.832050294337844 -1.24807544150677;-1 -0 1.5;-0 -1 1.5]);
B1 = Polyhedron('H', [1 0 1.5;-1 -0 1.5;0.554700196225229 0.832050294337844 1.24807544150677;-0.554700196225229 -0.832050294337844 1.24807544150677;0.0993606036924653 0.995051491347995 1.24398588936702;-0.0993606036924653 -0.995051491347995 1.24398588936702]);
B2 = Polyhedron('H', [1 0 1.5;-0 -1 1.5;0.0993606036924652 0.995051491347995 -1.24398588936702;-0.335436739645405 -0.942062733418567 1.28412569291872]);
B3 = Polyhedron('H', [0 1 1.5;-1 -0 1.5;-0.0993606036924652 -0.995051491347995 -1.24398588936702;0.335436739645405 0.942062733418567 1.28412569291872]);
B4 = Polyhedron('H', [-1 -0 1.5;0.554700196225229 0.832050294337844 -1.24807544150677;-0.335436739645405 -0.942062733418567 1.28412569291872]);

R = P \ [B1 B2 B3 B4];
G = Polyhedron('H', [1 2.80846616388662 -3.82822017133898;-1 -1 2.5;-1 1.29851111614146e-15 1.5;-1 -3.80846616388662 6.2324532532823;2.19718384310408e-15 -1 1.5;1 1.5 -2.25000000000001]);
assert(numel(R)==1);
assert(R==G);
