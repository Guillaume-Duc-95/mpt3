# prefix = @prefix@
# exec_prefix = @exec_prefix@
# instdir = @datarootdir@/
# bindir = @bindir@
CWD = `pwd`

# programs
SHELL = /bin/bash
CC = @CC@
CXX = @CXX@
SED = @SED@
MATLAB= @MATLAB@
LN_S = @LN_S@
WGET = @WGET@
UNZIP = @UNZIP@
GUNZIP = @GUNZIP@
GZIP = @GZIP@
SCP = @SCP@
MAXDOC = @MAXDOC@
RSYNC = @RSYNC@

# variables from MATLAB
@MATLAB_INFO@

# source package dir taken from parsing "conf.xml"
XML_DIR = $(strip $(shell $(SED) -n 's/.*XMLDIR.*>\(.*\)<\/def>/\1/gp' conf.xml))
XMLORIG_DIR = $(strip $(shell $(SED) -n 's/.*XMLORIGDIR.*>\(.*\)<\/def>/\1/gp' conf.xml))
FUNC_DIR = $(strip $(shell $(SED) -n 's/.*FUNCTIONS_DIR.*>\(.*\)<\/def>/\1/gp' conf.xml))
MPT_DIR = $(XML_DIR)/$(FUNC_DIR)

# version and release names
VERSION = 
ifeq ($(VERSION),)
	VERSION = $(shell hg tip --template '{node|short}' | cut -c1-6)
	FULLVERSION = dev-$(VERSION)
	UNSTABLE = 1
else
	FULLVERSION = $(VERSION)
	UNSTABLE = 0
endif

# replace dots with the underscores in the version string
MODVERSION = $(shell echo $(VERSION)| sed 's/\./_/g' )
MPTNAME = mpt3-$(MODVERSION)
MPTDOCNAME = mpt3doc-$(MODVERSION)
RELEASEDIR = release
DATE = $(shell date  +"%d.%m.%G")

# @Polyhedron subdirectory
POLYHEDRON_DIR = $(MPT_DIR)/modules/geometry/sets/@Polyhedron

# documentation directory
DOC_DIR = $(strip $(shell $(SED) -n 's/.*DESTDIR.*>\(.*\)<\/def>/\1/gp' conf.xml))

# run Makefile in the "@Polyhedron" subdirectory
polyhedron:  tmpdir
	@$(MAKE) -C $(POLYHEDRON_DIR)

# quick distribution: code with help description
# package tagged with id of the tip
distcode: distclean txt
	@echo "Creating $(RELEASEDIR)/$(MPTNAME).tgz..."
	@mkdir -p "$(RELEASEDIR)/$(MPTNAME)"
	@cp -Rf "$(XML_DIR)/$(FUNC_DIR)" "$(RELEASEDIR)/$(MPTNAME)"
	@# remove xml files
	@find "$(RELEASEDIR)/$(MPTNAME)/$(FUNC_DIR)" -name "*.xml" -delete
	@# remove research code
	@rm $(RELEASEDIR)/$(MPTNAME)/$(FUNC_DIR)/utils/{find_region.m,iSetDiff*}
	@# remove test files
	@rm -rf "$(RELEASEDIR)/$(MPTNAME)/$(FUNC_DIR)/tests"
	@# remove autogenerated files
	@find "$(RELEASEDIR)/$(MPTNAME)/$(FUNC_DIR)" \( -name "*.maxdoc_bak" -o -name "*~" -o -name "*.orig" -o -name "*.bak" \) -delete
	@# remove any mex-files and Makefiles
	@find "$(RELEASEDIR)/$(MPTNAME)/$(FUNC_DIR)" \( -name "*.mex*" -o -name "Makefile*" \) -delete
	@# pack the directory
	@cd "$(RELEASEDIR)" && tar czf "$(MPTNAME).tgz" "$(MPTNAME)/$(FUNC_DIR)"
	@rm -rf $(RELEASEDIR)/$(MPTNAME)

# upload mpt on the web
uploadcode: 
	@test -f $(RELEASEDIR)/$(MPTNAME).tgz || $(MAKE) distcode
ifeq ($(UNSTABLE),1)
	@echo "Uploading $(MPTNAME).tgz to mpt@autserv01:~/public_html/tbx/pool/mpt3/unstable"
	@scp $(RELEASEDIR)/$(MPTNAME).tgz mpt@autserv01.ee.ethz.ch:/home/mpt/public_html/tbx/pool/mpt3/unstable/
	@echo "       URL: http://control.ee.ethz.ch/~mpt/tbx/pool/mpt3/unstable/$(MPTNAME).tgz"
else
	@echo "Uploading $(MPTNAME).tgz to mpt@autserv01:~/public_html/tbx/pool/mpt3/"$(MODVERSION)
	@# create directory if it does not exist
	@mkdir -p "$(RELEASEDIR)/$(MODVERSION)" 
	@# move the file to directory
	@mv $(RELEASEDIR)/$(MPTNAME).tgz "$(RELEASEDIR)/$(MODVERSION)/"
	@# upload the directory
	@scp -r $(RELEASEDIR)/$(MODVERSION) mpt@autserv01.ee.ethz.ch:/home/mpt/public_html/tbx/pool/mpt3/
	@# move the file back from the directory
	@mv "$(RELEASEDIR)/$(MODVERSION)/$(MPTNAME).tgz" "$(RELEASEDIR)/" 
	@# remove the auxiliary directory
	@rm -r "$(RELEASEDIR)/$(MODVERSION)"
	@echo "       URL: http://control.ee.ethz.ch/~mpt/tbx/pool/mpt3/$(MODVERSION)/$(MPTNAME).tgz"
endif
	@echo "Version ID: $(FULLVERSION)"

#create a temporary copy of source files directory if not yet created, preserve timestamps
tmpdir:
	@$(RSYNC) -rt "$(XMLORIG_DIR)/" "$(notdir $(XML_DIR))"

# generate only text documentation without examples for quick release
txt: tmpdir
	@#run document generator which generates text headers and overwrites source files afterwards
	$(MAXDOC) -tw conf.xml
	@#put version and date string to "mptopt.m" and "Contents.m"
	@$(SED) 's/@version@/$(FULLVERSION)/g' $(XML_DIR)/$(FUNC_DIR)/mptopt.m > $(XML_DIR)/$(FUNC_DIR)/mptopt.m.tmp
	@mv $(XML_DIR)/$(FUNC_DIR)/mptopt.m.tmp $(XML_DIR)/$(FUNC_DIR)/mptopt.m
	@$(SED) 's/@version@/$(FULLVERSION)/g' $(XML_DIR)/$(FUNC_DIR)/Contents.m > $(XML_DIR)/$(FUNC_DIR)/Contents.m.tmp
	@$(SED) 's/@date@/$(DATE)/g' $(XML_DIR)/$(FUNC_DIR)/Contents.m.tmp > $(XML_DIR)/$(FUNC_DIR)/Contents.m
	@rm $(XML_DIR)/$(FUNC_DIR)/Contents.m.tmp

# generate all documentation
doc: tmpdir
	@# update all the documentation
	$(MAXDOC) -a conf.xml

# generate documentation separately from the code and pack it as "$(MPTDOCNAME)"
distdoc: distclean doc
	@mkdir -p "$(RELEASEDIR)/$(MPTDOCNAME)"
	@cp -Rf "$(DOC_DIR)" "$(RELEASEDIR)/$(MPTDOCNAME)"
	@# remove unnecessary doc files
	@rm -rf $(RELEASEDIR)/$(MPTDOCNAME)/$(DOC_DIR)/{out,txt,tmpdir,tex,tex4m,*.tex,*.dvi,*.xsl}
	@find "$(RELEASEDIR)/$(MPTDOCNAME)/$(DOC_DIR)/fig" -name "*.eps" -delete
	@# pack the directory
	@cd "$(RELEASEDIR)" && tar czf   "$(MPTDOCNAME).tgz" "$(MPTDOCNAME)/$(DOCDIR)"
	@rm -rf "$(RELEASEDIR)/$(MPTDOCNAME)"

# uploads documentation on the web
uploaddoc:
	@test -f $(RELEASEDIR)/$(MPTDOCNAME).tgz || $(MAKE) distdoc
	@echo "Uploading $(MPTDOCNAME).tgz to mpt@autserv01"
ifeq ($(UNSTABLE),1)
	@scp $(RELEASEDIR)/$(MPTDOCNAME).tgz mpt@autserv01.ee.ethz.ch:/home/mpt/public_html/tbx/pool/mpt3doc/unstable/
	@echo "       URL: http://control.ee.ethz.ch/~mpt/tbx/pool/mpt3doc/unstable/$(MPTDOCNAME).tgz"
else
	@# create directory if it does not exist
	@mkdir -p "$(RELEASEDIR)/$(MODVERSION)" 
	@# move the file to directory
	@mv $(RELEASEDIR)/$(MPTDOCNAME).tgz "$(RELEASEDIR)/$(MODVERSION)/"
	@# upload the directory
	@scp -r $(RELEASEDIR)/$(MODVERSION) mpt@autserv01.ee.ethz.ch:/home/mpt/public_html/tbx/pool/mpt3doc/
	@# move the file back from the directory
	@mv "$(RELEASEDIR)/$(MODVERSION)/$(MPTDOCNAME).tgz" "$(RELEASEDIR)/" 
	@# remove the auxiliary directory
	@rm -r "$(RELEASEDIR)/$(MODVERSION)"
	@echo "       URL: http://control.ee.ethz.ch/~mpt/tbx/pool/mpt3doc/$(MODVERSION)/$(MPTDOCNAME).tgz"
endif
	@echo "Version ID: $(FULLVERSION)"


uninstall: distclean

clean:
	@-rm config.status config.log matlab_info.tmp 

distclean: 
	@-$(MAKE) distclean -C $(POLYHEDRON_DIR)

# phony targets
.PHONY: clean distclean doc polyhedron uninstall dist

